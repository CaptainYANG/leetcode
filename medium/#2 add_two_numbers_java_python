/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head = new ListNode(0);
        ListNode out = head;
        int carry = 0;
        int val = 0;
        while(l1 != null || l2 !=null){
            val = carry + (l1 != null ? l1.val:0) + (l2 != null ? l2.val:0);
            carry = val/10;
            val = val % 10;
            head.next = new ListNode(val);
            head = head.next;
            if(l1 != null) l1 = l1.next;
            if(l2 != null) l2 = l2.next;
        }
        if(carry!=0) head.next = new ListNode(carry);
        return out.next;
    }
}



# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        head = ListNode(0)
        out = head
        carry = 0
        while(l1 or l2):
            if l1 and l2:
                val = carry + l2.val + l1.val
            elif not l2:
                val = carry + l1.val
            elif not l1:
                val = carry + l2.val
            carry = val/10
            head.next = ListNode(val%10)
            head = head.next
            if l1 is not None:
                l1 = l1.next
            if l2 is not None:
                l2 = l2.next
        if (carry != 0):
            head.next = ListNode(carry)
        return out.next
